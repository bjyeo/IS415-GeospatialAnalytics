---
title: "Hands-on Exercise 12"
author: "Bao Jie Yeo"
date: '2024-11-03'
date-modified: '2024-11-03'
execute: 
  eval: true
  echo: true
  freeze: true
---

## Overview

In this exercise, we explore Geographically Weighted Predictive Models. Predictive modelling uses the relationships between variables to predict the value of a target variable. Geographically Weighted Predictive Models (GWPM) are a type of predictive model that accounts for spatial variation in the relationships between variables. There are geospatial factors such as distance, topography, and climate that can influence the relationships between variables. GWPMs allow us to model these spatially varying relationships.

## Datasets

There are various datasets being used in the simple feature data frame. These include:

* Aspatial
  - [HDB Resale Data](https://data.gov.sg/datasets/d_8b84c4ee58e3cfc0ece0d773c8ca6abc/view): HDB resale transacted prices in Singapore from Jan 2017 onwards
* Geospatial
  - [2014 URA Master Plan Planning Subzone Boundary Data](https://data.gov.sg/collections/1708/view): Planning subzone boundaries in Singapore (ESRI Shapefile format)
* Locational Factors with Geographic Coordinates
  - [Eldercare](https://data.gov.sg/datasets/d_3545b068e3f3506c56b2cb6b6117b884/view): List of eldercare services in Singapore
  - [Hawker Centres](https://data.gov.sg/datasets/d_4a086da0a5553be1d89383cd90d07ecd/view): List of hawker centres in Singapore
  - [Parks](https://data.gov.sg/datasets/d_0542d48f0991541706b58059381a6eca/view): List of parks in Singapore
  - [Supermarkets](https://data.gov.sg/datasets/d_cac2c32f01960a3ad7202a99c27268a0/view): List of supermarkets in Singapore
  - [CHAS Clinics](https://data.gov.sg/datasets/d_548c33ea2d99e29ec63a7cc9edcccedc/view): List of CHAS clinics in Singapore
  - [Childcare Services](https://data.gov.sg/datasets/d_5d668e3f544335f8028f546827b773b4/view) : List of childcare services in Singapore
  - [Kindergartens](https://data.gov.sg/datasets/d_7fe9a72b1afff18e48111772c8d0fd39/view): List of kindergartens in Singapore
  - [MRT Data](https://datamall.lta.gov.sg/content/dam/datamall/datasets/PublicTransportRelated/Train%20Line%20Codes.xlsx): List of MRT and LRT stations in Singapore with the station names and codes
  - [Bus Stops](https://datamall.lta.gov.sg/content/dam/datamall/datasets/PublicTransportRelated/BusStops.zip): List of bus stops in Singapore
* Locational Factors without Geographic Coordinates
  - [Primary Schools](https://data.gov.sg/datasets/d_688b934f82c1059ed0a6993d2a829089/view): Primary School data extracted from General Information on Schools in Singapore
  - **CBD** Coordinates: Obtained from Google
  - [Shopping Malls](https://en.wikipedia.org/wiki/List_of_shopping_malls_in_Singapore): List of shopping malls in Singapore
  - [Good Primary Schools](https://www.salary.sg/2021/best-primary-schools-2021-by-popularity/): Ranking of good primary schools according to SalarySG forum

## Loading Packages

A couple of packages here we haven't tried before; namely **SpatialML** and **rsample**. SpatialML is a package that provides a suite of tools for spatial machine learning. rsample is a package that provides a suite of tools for splitting data into training and testing sets. 

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, 
               tmap, rsample, Metrics, tidyverse)
```

## Data Preparation

### Reading Data File

```{r}
mdata <- read_rds("data/rds/mdata.rds")
```

### Data Sampling

The data is split into train and test datasets with a split of 65-35. We can use the `initial_split` function from the `rsample` package to split the data.

```{r}
set.seed(1234)
resale_split <- initial_split(mdata, 
                              prop = 6.5/10,)
train_data <- training(resale_split)
test_data <- testing(resale_split)
```

```{r}
write_rds(train_data, "data/rds/train_data.rds")
write_rds(test_data, "data/rds/test_data.rds")
```

## Computing Correlation Matrix

Before loading the predictors into a predictive model, it is always a good practice to plot the correlation matrix to examine if there are signs of multicolinearity.

```{r}
#| fig-width: 8
#| fig-height: 8
mdata_nogeo <- mdata %>%
  st_drop_geometry()
corrplot::corrplot(cor(mdata_nogeo[, 2:17]), 
                   diag = FALSE, 
                   order = "AOE",
                   tl.pos = "td", 
                   tl.cex = 0.5, 
                   method = "number", 
                   type = "upper")
```

From the correlation matrix, all the correlation values are below 0.8. Hence, there is no sign of multicolinearity.

## Retrieving Stored Data

```{r}
train_data <- read_rds("data/rds/train_data.rds")
test_data <- read_rds("data/rds/test_data.rds")
```

## Building Non-Spatial Multiple Linear Regression Model

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
summary(price_mlr)
```

```{r}
#| eval: false
write_rds(price_mlr, "data/rds/price_mlr.rds" ) 
```

## gwr Predictive Model

Next, we will calibrate a model to predict HDB resale prices using the **GWModel** package.

### Converting sf data frame to SpatialPointsDataFrame

```{r}
train_data_sp <- as_Spatial(train_data)
train_data_sp
```

### Computing Adaptive Bandwidth

The code chunk below uses `bw.gwr()` from **GWModel** to determine the optimal bandwidth to be used.  

```{r}
#| eval: false
bw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=train_data_sp,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

`Adaptive bandwidth: 40 CV score: 6.780447e+12`

From the result, using 40 neighbour points will be the optimal bandwidth if adaptive bandwidth is used for this data set.

```{r}
#| eval: false
write_rds(bw_adaptive, "data/rds/bw_adaptive.rds")
```

### Constructing Adaptive Bandwidth GWR Model

```{r}
bw_adaptive <- read_rds("data/rds/bw_adaptive.rds")
```

Now, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and Gaussian kernel as shown in the code chunk below.

```{r}
#| eval: false
gwr_adaptive <- gwr.basic(formula = resale_price ~
                            floor_area_sqm + storey_order +
                            remaining_lease_mths + PROX_CBD + 
                            PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                            WITHIN_1KM_PRISCH,
                          data=train_data_sp,
                          bw=bw_adaptive, 
                          kernel = 'gaussian', 
                          adaptive=TRUE,
                          longlat = FALSE)
```

```{r}
#| eval: false
write_rds(gwr_adaptive, "data/rds/gwr_adaptive.rds")
```

### Retrieve gwr output

```{r}
gwr_adaptive <- read_rds("data/rds/gwr_adaptive.rds")
gwr_adaptive
```

### Converting Test Data to SpatialPointsDataFrame

```{r}
test_data_sp <- as_Spatial(test_data)
test_data_sp
```

### Computing Adaptive Bandwidth for Test Data

```{r}
#| eval: false
gwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=test_data_sp,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

`Adaptive bandwidth: 25 CV score: 4.04299e+12`

### Computing Predictive Values of Test Data

:::{.callout-important}
The code chunk below doesn't execute correctly. Will debug later.
:::

```{r}
#| eval: false
gwr_pred <- gwr.predict(formula = resale_price ~
                          floor_area_sqm + storey_order +
                          remaining_lease_mths + PROX_CBD + 
                          PROX_ELDERLYCARE + PROX_HAWKER + 
                          PROX_MRT + PROX_PARK + PROX_MALL + 
                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
                          WITHIN_1KM_PRISCH, 
                        data=train_data_sp, 
                        predictdata = test_data_sp, 
                        bw=40,
                        kernel = 'gaussian', 
                        adaptive=TRUE, 
                        longlat = FALSE)
```

## Preparing Coordinates Data

### Extracting Coordinates Data

```{r}
coords <- st_coordinates(mdata)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```

```{r}
#| eval: false
coords_train <- write_rds(coords_train, "data/rds/coords_train.rds" )
coords_test <- write_rds(coords_test, "data/rds/coords_test.rds" )
```

### Dropping Geometry Field

```{r}
train_data <- train_data %>% 
  st_drop_geometry()
```

## Calibrating Random Forest Model

```{r}
#| eval: false
rf <- ranger(resale_price ~ floor_area_sqm + storey_order + 
               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + 
               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + 
               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
               WITHIN_1KM_PRISCH,
             data=train_data)
```

```{r}
#| cache: true
rf
```

```{r}
#| eval: false
write_rds(rf, "data/rds/rf.rds")
```

```{r}
rf <- read_rds("data/rds/rf.rds")
rf
```

## Calibrating Geographical Random Forest Model

We will now calibrate a model to predict HDB resale prices using `grf()` of the **SpatialML** package.

### Calibrating using Train Data

```{r}
#| eval: false
gwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +
                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +
                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                       WITHIN_1KM_PRISCH,
                     dframe=train_data, 
                     bw=55,
                     kernel="adaptive",
                     coords=coords_train)
```

--------------- Local Model Summary ---------------


Residuals OOB:

     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
-262260.7  -12903.0     447.9     564.7   15004.1  326045.2 

Residuals Predicted (Not OOB):

     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
-78659.78  -3523.05     56.10     58.95   3907.08  87026.10 

Local Variable Importance:

Mean squared error (OOB): 928216564.586
R-squared (OOB) %: 93.575
AIC (OOB): 213435.096
AICc (OOB): 213435.143
Mean squared error Predicted (Not OOB): 73814830.258
R-squared Predicted (Not OOB) %: 99.489
AIC Predicted (Not OOB): 187269.921
AICc Predicted (Not OOB): 187269.967

Calculation time (in seconds): 20.3795

```{r}
#| eval: false
write_rds(gwRF_adaptive, "data/rds/gwRF_adaptive.rds")
```

```{r}
gwRF_adaptive <- read_rds("data/rds/gwRF_adaptive.rds")
```

### Predicting using Test Data

First, we need to prepare the test data.

```{r}
test_data <- cbind(test_data, coords_test) %>%
  st_drop_geometry()
```

Next, we call the `predict.grf()` function to predict the HDB resale prices using the test data.

```{r}
#| eval: false
gwRF_pred <- predict.grf(gwRF_adaptive, 
                           test_data, 
                           x.var.name="X",
                           y.var.name="Y", 
                           local.w=1,
                           global.w=0)
```

```{r}
#| eval: false
GRF_pred <- write_rds(gwRF_pred, "data/rds/GRF_pred.rds")
```

### Converting Predicted Output to Data Frame

```{r}
GRF_pred <- read_rds("data/rds/GRF_pred.rds")
GRF_pred_df <- as.data.frame(GRF_pred)
```

```{r}
test_data_p <- cbind(test_data, GRF_pred_df)
```

```{r}
#| eval: false
write_rds(test_data_p, "data/rds/test_data_p.rds")
```

### Calculating Root Mean Squared Error (RMSE)

The root mean squared error refers to the square root of the average of the squared differences between the predicted and actual values. It is a measure of the accuracy of the model.

```{r}
rmse(test_data_p$resale_price, 
     test_data_p$GRF_pred)
```

### Visualizing Predicted Values

We can use a scatterplot to visualize the predicted values against the actual resale prices.

```{r}
ggplot(data = test_data_p,
       aes(x = GRF_pred,
           y = resale_price)) +
  geom_point()
```

From the plot above, we observe that the predicted values are close to the diagonal lines, which indicates that the model is accurate. The scatter plot can also be used to detect the presence of outliers in the model.